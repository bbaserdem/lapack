#!/usr/bin/env python3
"""
Export functionality for LAPACK graph data.

This module provides a unified Exporter class that wraps the export methods
from GraphSchema for exporting to JSON, CSV, and Cypher formats.
"""

from pathlib import Path
from typing import Optional, Union, List, Tuple
import json
import csv

from .graph_schema import GraphSchema


class Exporter:
    """Export LAPACK graph data to various formats for visualization and Neo4j import."""
    
    def __init__(self, graph: GraphSchema):
        """
        Initialize exporter with a graph schema.
        
        Args:
            graph: GraphSchema instance containing nodes and relationships
        """
        self.graph = graph
    
    def to_json(self, filepath: Union[str, Path]) -> None:
        """
        Export graph to JSON format for visualization tools.
        
        The JSON format includes:
        - nodes: Array of node objects with id, type, and properties
        - relationships: Array of relationship objects with type, from, to, and properties
        
        Args:
            filepath: Path where the JSON file should be saved
        """
        filepath = Path(filepath)
        filepath.parent.mkdir(parents=True, exist_ok=True)
        self.graph.to_json(filepath)
    
    def to_csv(self, output_dir: Union[str, Path]) -> List[Path]:
        """
        Export graph to CSV files for neo4j-admin bulk import.
        
        Creates separate CSV files for:
        - Each node type (e.g., routine_nodes.csv, file_nodes.csv)
        - Each relationship type (e.g., calls_relationships.csv)
        
        Args:
            output_dir: Directory where CSV files should be saved
            
        Returns:
            List of paths to created CSV files
        """
        output_dir = Path(output_dir)
        output_dir.mkdir(parents=True, exist_ok=True)
        self.graph.to_csv(output_dir)
        
        # Return list of created files
        created_files = []
        for csv_file in output_dir.glob("*.csv"):
            created_files.append(csv_file)
        
        return sorted(created_files)
    
    def to_cypher(self, filepath: Union[str, Path]) -> None:
        """
        Generate Cypher statements for direct Neo4j import.
        
        Creates a file with:
        - Constraint and index creation statements
        - Node creation statements (using MERGE)
        - Relationship creation statements (using MERGE)
        
        Args:
            filepath: Path where the Cypher script should be saved
        """
        filepath = Path(filepath)
        filepath.parent.mkdir(parents=True, exist_ok=True)
        
        statements = self.graph.to_cypher_statements()
        
        with open(filepath, 'w') as f:
            # Write header
            f.write("// LAPACK Graph Database - Cypher Import Script\n")
            f.write("// Generated by lapack_util.exporter\n\n")
            
            # Write statements
            for stmt in statements:
                if isinstance(stmt, str):
                    # Simple statement (constraints/indexes)
                    f.write(f"{stmt}\n")
                elif isinstance(stmt, tuple):
                    # Parameterized statement
                    statement, params = stmt
                    f.write(f"\n// {statement}\n")
                    f.write(f"// Parameters: {json.dumps(params)}\n")
                    # Convert to unparameterized form for direct execution
                    cypher = statement
                    for key, value in params.items():
                        if isinstance(value, str):
                            cypher = cypher.replace(f"${key}", f"'{value}'")
                        else:
                            cypher = cypher.replace(f"${key}", str(value))
                    f.write(f"{cypher};\n")
            
            f.write("\n// End of import script\n")
    
    def validate_export(self, export_type: str, path: Union[str, Path]) -> bool:
        """
        Validate that an export was successful and contains expected data.
        
        Args:
            export_type: Type of export ('json', 'csv', or 'cypher')
            path: Path to exported file(s)
            
        Returns:
            True if export appears valid, False otherwise
        """
        path = Path(path)
        
        if export_type == 'json':
            if not path.exists() or path.stat().st_size == 0:
                return False
            
            try:
                with open(path, 'r') as f:
                    data = json.load(f)
                
                # Check for expected structure
                return (
                    isinstance(data, dict) and
                    'nodes' in data and
                    'relationships' in data and
                    isinstance(data['nodes'], list) and
                    isinstance(data['relationships'], list) and
                    len(data['nodes']) == len(self.graph.nodes) and
                    len(data['relationships']) == len(self.graph.relationships)
                )
            except (json.JSONDecodeError, KeyError):
                return False
        
        elif export_type == 'csv':
            if not path.is_dir():
                return False
            
            # Check that CSV files exist for nodes and relationships
            csv_files = list(path.glob("*.csv"))
            if not csv_files:
                return False
            
            # Verify at least one node CSV exists
            node_files = [f for f in csv_files if '_nodes.csv' in f.name]
            return len(node_files) > 0
        
        elif export_type == 'cypher':
            if not path.exists() or path.stat().st_size == 0:
                return False
            
            try:
                with open(path, 'r') as f:
                    content = f.read()
                
                # Check for expected Cypher commands
                return (
                    'CREATE CONSTRAINT' in content and
                    'CREATE INDEX' in content and
                    'MERGE' in content
                )
            except IOError:
                return False
        
        return False
    
    def export_all(self, output_dir: Union[str, Path]) -> dict:
        """
        Export to all supported formats at once.
        
        Args:
            output_dir: Base directory for exports
            
        Returns:
            Dictionary mapping format names to output paths
        """
        output_dir = Path(output_dir)
        output_dir.mkdir(parents=True, exist_ok=True)
        
        results = {}
        
        # JSON export
        json_path = output_dir / 'graph.json'
        self.to_json(json_path)
        results['json'] = json_path
        
        # CSV export
        csv_dir = output_dir / 'csv'
        csv_files = self.to_csv(csv_dir)
        results['csv'] = csv_dir
        results['csv_files'] = csv_files
        
        # Cypher export
        cypher_path = output_dir / 'import.cypher'
        self.to_cypher(cypher_path)
        results['cypher'] = cypher_path
        
        return results