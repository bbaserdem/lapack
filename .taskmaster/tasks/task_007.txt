# Task ID: 7
# Title: Set up and Configure Neo4j Server
# Status: done
# Dependencies: 3, 4
# Priority: medium
# Description: Set up and configure a Neo4j server to store and manage the LAPACK subroutine dependency graph. This includes installing Neo4j, configuring it for local access, and optimizing settings for graph storage and querying.
# Details:
1.  **Install Neo4j:** Download and install the Neo4j Community Edition from the official Neo4j website. Follow the installation instructions for the target operating system (Linux, macOS, or Windows).
2.  **Configure Neo4j:**
    *   Modify the `neo4j.conf` file (located in the Neo4j configuration directory) to allow remote access (if needed) by setting `dbms.default_listen_address=0.0.0.0`.
    *   Set the heap size in `neo4j.conf` based on available system memory. A reasonable starting point is `dbms.memory.heap.initial_size=4g` and `dbms.memory.heap.max_size=8g`. Adjust these values based on the size of the LAPACK dependency graph.
    *   Configure the location of the database files by setting `dbms.directories.data` and `dbms.directories.logs`.
    *   Enable Cypher shell access by uncommenting `dbms.shell.enabled=true`.
3.  **Start Neo4j Server:** Start the Neo4j server using the appropriate command for the operating system (e.g., `neo4j start` on Linux/macOS).
4.  **Verify Installation:** Access the Neo4j browser interface by navigating to `http://localhost:7474` in a web browser. Use the default credentials (neo4j/neo4j) to log in and change the password.
5.  **Create a Database:** Create a new Neo4j database specifically for the LAPACK dependency graph. This can be done through the Neo4j browser interface or using Cypher commands.
6.  **Optimize Configuration:**
    *   Tune Neo4j's memory settings based on the size of the graph. Monitor performance and adjust `dbms.memory.heap.initial_size` and `dbms.memory.heap.max_size` accordingly.
    *   Consider using Neo4j Bloom for graph visualization and exploration.
7.  **Security Considerations:** If the Neo4j server is exposed to a network, configure appropriate authentication and authorization mechanisms to protect the database.

# Test Strategy:
1.  **Installation Verification:** Ensure that Neo4j is installed correctly and the server starts without errors.
2.  **Browser Access:** Verify that the Neo4j browser interface is accessible via `http://localhost:7474`.
3.  **Database Creation:** Confirm that a new database can be created successfully.
4.  **Configuration Validation:** Check that the configured settings in `neo4j.conf` are applied correctly by examining the Neo4j logs.
5.  **Performance Testing:** Import a sample LAPACK dependency graph (generated from Task 4) into the Neo4j database. Run several Cypher queries to test query performance. Monitor CPU and memory usage during query execution. Adjust memory settings as needed.
6.  **Security Audit:** If the Neo4j server is exposed to a network, perform a security audit to ensure that appropriate authentication and authorization mechanisms are in place.

# Subtasks:
## 1. Create Local Neo4j Data Directory [done]
### Dependencies: None
### Description: Create a dedicated directory for Neo4j database files outside the Nix store to persist data. This directory will store the LAPACK dependency graph data.
### Details:
Create a directory, for example, `mkdir /home/user/neo4j-lapack-data`. This directory will be referenced in the Neo4j configuration file.

## 2. Configure Neo4j for LAPACK Graph [done]
### Dependencies: None
### Description: Modify the `neo4j.conf` file to configure Neo4j for local access, specify the data directory, and optimize memory settings for the LAPACK dependency graph.
### Details:
Edit `/nix/store/98g0ky36l4w452hjz6wqaf93gpbfrl2r-neo4j-5.26.1/conf/neo4j.conf`. Set `dbms.default_listen_address=0.0.0.0` for access. Set `dbms.directories.data=/home/user/neo4j-lapack-data`. Adjust `dbms.memory.heap.initial_size` and `dbms.memory.heap.max_size` based on available memory (e.g., 4g and 8g initially).

## 3. Start Neo4j Server [done]
### Dependencies: None
### Description: Start the Neo4j server using the `neo4j start` command from the Nix store path.
### Details:
Execute `/nix/store/98g0ky36l4w452hjz6wqaf93gpbfrl2r-neo4j-5.26.1/bin/neo4j start` to start the Neo4j server.

## 4. Verify Neo4j Installation and Access [done]
### Dependencies: None
### Description: Access the Neo4j browser interface to verify the installation and ensure the server is running correctly.
### Details:
Open a web browser and navigate to `http://localhost:7474`. Log in with the default credentials (neo4j/neo4j) and change the password. Ensure the browser interface is functional.

## 5. Create Initial Database Schema for LAPACK Dependencies [done]
### Dependencies: None
### Description: Create the initial database schema in Neo4j based on the designed graph schema (Task 3), including node labels, relationship types, and constraints.
### Details:
Using the Neo4j browser or Cypher shell, execute Cypher commands to create node labels (Routine, File, Operation, Precision), relationship types (CALLS, DEFINED_IN, IMPLEMENTS, HAS_PRECISION), and uniqueness constraints as defined in Task 3.

