# Task ID: 3
# Title: Design and Validate Graph Schema
# Status: pending
# Dependencies: 2
# Priority: medium
# Description: Design and validate the graph schema for Neo4j import, including node types (Routine, File, Operation, Precision) and relationship types (CALLS, DEFINED_IN, IMPLEMENTS, HAS_PRECISION). Ensure schema consistency and uniqueness constraints.
# Details:
1. Define the graph schema with node types: Routine, File, Operation, Precision.
2. Define relationship types: CALLS, DEFINED_IN, IMPLEMENTS, HAS_PRECISION.
3. Implement a `GraphSchema` class to create and validate the schema.
4. Implement uniqueness constraints for nodes and relationships.
```python
class GraphSchema:
    def __init__(self):
        self.node_types = ['Routine', 'File', 'Operation', 'Precision']
        self.relationship_types = ['CALLS', 'DEFINED_IN', 'IMPLEMENTS', 'HAS_PRECISION']

    def validate(self, graph):
        # Validate the graph against the schema
        pass
```

# Test Strategy:
Create unit tests to verify the graph schema. Test node and relationship types. Validate schema consistency by attempting to create invalid graphs. Ensure uniqueness constraints are enforced. Use a mock Neo4j database for testing.

# Subtasks:
## 1. Run graph schema tests [pending]
### Dependencies: None
### Description: Execute tests/test_graph_schema.py to verify graph creation functionality
### Details:


## 2. Verify node and relationship creation [pending]
### Dependencies: None
### Description: Test that all node types (Routine, File, Operation, Precision) and relationships are created correctly
### Details:


